[{"fullname": "PauliOps", "modulename": "PauliOps", "qualname": "", "type": "module", "doc": "<p>Created on Mon Dec 21 15:16:56 2020\nA Collection of Methods to calcualte useful operations on Pauli Strings</p>\n\n<p>@author: Thomas Steckmann\n@author: Efekan Kokcu</p>\n"}, {"fullname": "PauliOps.ops", "modulename": "PauliOps", "qualname": "ops", "type": "variable", "doc": "<h6 id=\"rules\">RULES</h6>\n\n<blockquote>\n  <p>Used to find the multiplication between two paulis represented as indices in a tuple (I == 0, X == 1, Y == 2, Z == 3)</p>\n</blockquote>\n\n<p>The operation is (index1 + index2*RULES[index1] % 4) = Pauli Matrix result as an index</p>\n\n<p>I * anything: 0 + (Index2)<em>1 = index2\nX * anythong: (1 + (Index2)</em>3 % 4) gives\n                                         1 + 0 = 1 for I, \n                                         (1 + 1<em>3) % 4 = 0 for X\n                                         (1 + 2</em>3) % 4 = 7 % 4 = 3 for Y\n                                         (1 + 3*3) % 4 = 10 % 4 = 2 for Z as index2\nThese can easily be expanded for Y and Z</p>\n"}, {"fullname": "PauliOps.RULES", "modulename": "PauliOps", "qualname": "RULES", "type": "variable", "doc": "<p>SIGN_RULES: \n    Gives the multiplication sign rules for multiplying Pauli Matricies (ex. X*Y -> iZ)</p>\n\n<p>I  X  Y  Z\nI +  +  +  +\nX +  +  +i -i\nY +  -i +  +i\nZ +  +i -i +</p>\n\n<p>Order: row * column</p>\n"}, {"fullname": "PauliOps.set_tuples", "modulename": "PauliOps", "qualname": "set_tuples", "type": "function", "doc": "<p>Sets the global tuples up there and generates commutation table, so that we wouldn't have to calculate their commutation again and again.</p>\n", "parameters": ["k", "m", "h"], "funcdef": "def"}, {"fullname": "PauliOps.commutatePauliString", "modulename": "PauliOps", "qualname": "commutatePauliString", "type": "function", "doc": "<p>Computes the commutator of two Pauli Strings representated as a tuple</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>a (np.complex128):</strong>   The coefficient of the first Pauli String term</li>\n<li><strong>tupleA (Tuple):</strong>   tuple represenation of the first Pauli String</li>\n<li><strong>b (np.complex128):</strong>   The coefficient of the second Pauli String term</li>\n<li><strong>tupleB (tuple):</strong>   tuple represenation of the second Pauli String</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>c (np.complex128):\n      The coefficient of the result [a<em>TupleA,b</em>TupleB] = c*TupleC, where c is the Structure Constant * a * b\n  tupleC (tuple): \n      the elementwise commutator of the PauliString, ignoring coefficients.</p>\n</blockquote>\n", "parameters": ["a", "tupleA", "b", "tupleB"], "funcdef": "def"}, {"fullname": "PauliOps.multiplyPauliString", "modulename": "PauliOps", "qualname": "multiplyPauliString", "type": "function", "doc": "<p>Computes the multiplication of two Pauli Strings representated as a tuple</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>a (np.complex128):</strong>   The coefficient of the first Pauli String term</li>\n<li><strong>tupleA (Tuple):</strong>  tuple represenation of the first Pauli String</li>\n<li><strong>b (np.complex128):</strong>  The coefficient of the second Pauli String term</li>\n<li><strong>tupleB (Tuple):</strong>   tuple represenation of the second Pauli String</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>c (np.complex128):\n      The coefficient of the result a<em>TupleA . b</em>TupleB = c*TupleC, where c (the sign of the product of Paulis * a * b)\n  tupleC (tuple) :\n      the elementwise product of the PauliString, ignoring coefficients.</p>\n</blockquote>\n", "parameters": ["a", "tupleA", "b", "tupleB"], "funcdef": "def"}, {"fullname": "PauliOps.multiplyLinComb", "modulename": "PauliOps", "qualname": "multiplyLinComb", "type": "function", "doc": "<p>Returns multiplication of two linear combinations of Pauli terms</p>\n", "parameters": ["A", "tuplesA", "B", "tuplesB"], "funcdef": "def"}, {"fullname": "PauliOps.simplifyLinComb", "modulename": "PauliOps", "qualname": "simplifyLinComb", "type": "function", "doc": "<p>Modifies the input lists</p>\n\n<p>Simplifies lin comb of Pauli matrices that it eats. Doens't return anything</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>A:</strong>  A list</li>\n<li><strong>tuples:</strong>  A list</li>\n</ul>\n", "parameters": ["A", "tuples"], "funcdef": "def"}, {"fullname": "PauliOps.commutateLinComb", "modulename": "PauliOps", "qualname": "commutateLinComb", "type": "function", "doc": "<p></p>\n", "parameters": ["A", "tuplesA", "B", "tuplesB", "accur"], "funcdef": "def"}, {"fullname": "PauliOps.commutateLinCombWithoutFactorOf2", "modulename": "PauliOps", "qualname": "commutateLinCombWithoutFactorOf2", "type": "function", "doc": "<p></p>\n", "parameters": ["A", "tuplesA", "B", "tuplesB", "accur"], "funcdef": "def"}, {"fullname": "PauliOps.cleancoefs", "modulename": "PauliOps", "qualname": "cleancoefs", "type": "function", "doc": "<p>Rounds coefficients that are smaller than accur to zero.</p>\n", "parameters": ["coefs", "accur"], "funcdef": "def"}]